@startuml Vue Déploiement

' Définir les styles
skinparam node {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    FontColor Black
}

skinparam database {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    FontColor Black
}

skinparam artifact {
    BackgroundColor Ivory
    BorderColor Gray
    FontColor Black
}

' Définir les nœuds
node "Poste de Caisse" as PosteCaisse {
    node "Application Python" as AppPython {
        artifact "Interface Console\n(main.py)" as Main
        artifact "Services\n(service.py)" as Services
        artifact "DAOs\n(dao.py)" as DAOs
        artifact "Modèles\n(models.py)" as Models
        artifact "Configuration DB\n(db.py)" as ConfigDB
        
        ' Relations internes
        Main -down-> Services
        Services -down-> DAOs
        DAOs -down-> Models
        DAOs .right.> ConfigDB
        Models .right.> ConfigDB
    }
    
    database "SQLite" as SQLite {
        artifact "Fichier store.db" as StoreDB
    }
    
    ' Connexion entre application et base de données
    AppPython -- SQLite : "SQLite API\nvia SQLAlchemy"
}

' Notes explicatives
note right of PosteCaisse
  Architecture 2-tier locale
  (3 postes de caisse indépendants maximum)
end note

note bottom of SQLite
  Base de données fichier locale
  Transactions ACID
end note

note top of AppPython
  Application monolithique
  exécutée localement
end note

' Titre et légende
title Architecture de déploiement - Système de Caisse (2-tier)

legend right
  <b>Vue Déploiement</b>
  
  Ce diagramme illustre l'architecture de déploiement
  du système de caisse suivant un modèle client/serveur
  à deux niveaux (2-tier) avec base de données locale.
  
  <b>Points forts:</b>
  - Simplicité de déploiement
  - Indépendance des postes
  - Performances optimales pour transactions locales
  
  <b>Limitations:</b>
  - Pas de synchronisation entre caisses
  - Scalabilité limitée (max 3 caisses)
endlegend

@enduml 