@startuml Vue Implémentation

' Définition des styles
skinparam component {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    FontColor Black
}

skinparam package {
    BackgroundColor LightYellow
    BorderColor DarkOrange
    FontColor Black
}

' Définition des composants
package "Application (src/)" {
    ' Couche de présentation
    component "main.py" as Main {
        interface "Interface console"
        interface "Gestion des menus"
    }
    
    ' Couche métier
    component "service.py" as Service {
        interface "ProduitService"
        interface "CategorieService"
        interface "VenteService"
        interface "TransactionService"
    }
    
    ' Couche d'accès aux données
    component "dao.py" as DAO {
        interface "ProduitDAO"
        interface "CategorieDAO"
        interface "VenteDAO"
        interface "CaisseDAO"
        interface "TransactionDAO"
    }
    
    ' Modèles et configuration
    component "models.py" as Models {
        interface "Produit"
        interface "Categorie"
        interface "Vente"
        interface "Transaction"
        interface "Base"
    }
    
    component "db.py" as DB {
        interface "Engine"
        interface "SessionLocal"
        interface "ConnectionPool"
    }
    
    component "create_db.py" as CreateDB {
        interface "Initialisation BD"
        interface "Données initiales"
    }
}

package "Infrastructure" {
    component "Docker" {
        component "PostgreSQL" {
            interface "store_db"
        }
        component "Volumes" {
            interface "postgres_data"
        }
    }
}

package "Tests (tests/)" as TestsPackage {
    component "test_models.py" as TestModels
    component "test_dao.py" as TestDAO
    component "test_service.py" as TestService
    component "test_integration.py" as TestIntegration
    component "run_tests.py" as RunTests
}

' Définition des relations entre composants
Main --> Service : "utilise"
Service --> DAO : "utilise"
DAO --> Models : "utilise"
DAO --> DB : "utilise"
Models --> DB : "utilise"
CreateDB --> Models : "utilise"
CreateDB --> DB : "utilise"
DB --> PostgreSQL : "connexion\npool"

TestModels --> Models : "teste"
TestDAO --> DAO : "teste"
TestDAO --> Models : "utilise"
TestService --> Service : "teste"
TestService --> DAO : "utilise"
TestIntegration --> Main : "teste"
TestIntegration --> Service : "utilise"
RunTests --> TestModels : "exécute"
RunTests --> TestDAO : "exécute"
RunTests --> TestService : "exécute"
RunTests --> TestIntegration : "exécute"

' Notes explicatives
note right of Main
  Interface utilisateur console
  Gestion des entrées/sorties
  Menus interactifs
end note

note right of Service
  Logique métier
  Validation des données
  Gestion des transactions
  Pool de connexions (5 + 10)
end note

note right of DAO
  Abstraction PostgreSQL
  Opérations CRUD
  Requêtes via SQLAlchemy
end note

note right of Models
  Modèles SQLAlchemy
  Relations entre entités
  Contraintes de données
end note

note right of PostgreSQL
  Base de données PostgreSQL
  Transactions ACID
  Persistance via volumes
end note

note bottom of TestsPackage
  Tests unitaires et d'intégration
  Couverture de code
  Tests automatisés
end note

' Titre et légende
title Architecture d'Implémentation - Système de Caisse

legend right
  <b>Vue Implémentation</b>
  
  Architecture en couches avec :
  - Interface console (main.py)
  - Services métier (service.py)
  - Accès données (dao.py)
  - ORM SQLAlchemy (models.py)
  - PostgreSQL + Docker
  
  Caractéristiques :
  - Pool de connexions (5 permanentes, 10 overflow)
  - Persistance via volumes Docker
  - Tests automatisés
endlegend

@enduml 